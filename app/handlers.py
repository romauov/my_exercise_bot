from datetime import datetime
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from app.draw_plot import draw_plot
from app.utils import save_weight_json


router = Router()


class WeightUpdate(StatesGroup):
    model = State()


class WeightPeriod(StatesGroup):
    weight_period = State()


def period_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="last"),
                types.KeyboardButton(text="month")
            ],
            [
                types.KeyboardButton(text="quarter"),
                types.KeyboardButton(text="year")
            ],
            [
                types.KeyboardButton(text="all")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥"
    )

@router.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")


@router.message(Command('weight'))
async def update_weight(message: Message, state: FSMContext):
    await state.set_state(WeightUpdate.model)
    await message.answer("–í–≤–µ–¥–∏ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 99.9")


@router.message(WeightUpdate.model)
async def save_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        user_id = message.from_user.id
        date = datetime.now().strftime('%d-%m-%Y')

        save_weight_json(user_id, weight, date)

        await message.reply("–í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await state.clear()
        photo_file = FSInputFile(path='plot.png')
        await message.answer_photo(photo=photo_file)

    except Exception as e:
        await message.reply(e)


@router.message(Command("weight_"))
async def cmd_weight(message: Message, state: FSMContext):
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=period_keyboard()
    )
    await state.set_state(WeightPeriod.weight_period)


@router.message(WeightPeriod.weight_period)
async def process_period(message: Message, state: FSMContext):
    period = message.text.lower()
    valid_periods = ["last", "month", "quarter", "year", "all"]

    if period not in valid_periods:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return

    try:
        draw_plot(user_id=message.from_user.id, period=period)

        photo = FSInputFile("plot.png")
        await message.answer_photo(
            photo=photo,
            caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()