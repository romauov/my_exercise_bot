def format_workout_response(workout, difficulty):
    """Format workout response message"""
    response = f"<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> {workout['name']}\n\n"
    response += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<blockquote>{workout['description']}</blockquote>\n\n"
    response += f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty}\n"
    response += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:</b> {workout.get('reps', 0)}"
    return response


def format_workout_list_response(workouts):
    """Format workout list response message"""
    if not workouts:
        return "üòî –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç."
    
    response = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n"
    
    for workout in workouts:
        tags = ', '.join(workout.get('tags', []))
        workout_info = f"\n<b>{workout['id']}. {workout['name']}</b>\n"
        workout_info += f"<blockquote>{workout['description']}</blockquote>\n"
        workout_info += f"   –¢–µ–≥–∏: {tags}\n"
        workout_info += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {workout.get('reps', 0)}\n"
        
        # Check if adding this workout would exceed the Telegram message limit
        if len(response + workout_info) > 4000:  # Using 4000 to leave some buffer
            # Return what we have so far and start a new message
            response += "\n<i>(–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...)</i>"
            break
        else:
            response += workout_info
    
    return response


def format_workout_list_response_parts(workouts):
    """Format workout list response message, splitting into multiple parts if needed"""
    if not workouts:
        return ["üòî –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç."]
    
    parts = []
    current_part = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n"
    remaining_workouts = workouts.copy()
    
    while remaining_workouts:
        workout = remaining_workouts.pop(0)
        tags = ', '.join(workout.get('tags', []))
        workout_info = f"\n<b>{workout['id']}. {workout['name']}</b>\n"
        workout_info += f"<blockquote>{workout['description']}</blockquote>\n"
        workout_info += f"   –¢–µ–≥–∏: {tags}\n"
        workout_info += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {workout.get('reps', 0)}\n"
        
        # Check if adding this workout would exceed the Telegram message limit
        if len(current_part + workout_info) > 4000:  # Using 4000 to leave some buffer
            # Add continuation message and save current part
            current_part += "\n<i>(–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...)</i>"
            parts.append(current_part)
            
            # Start new part with header and this workout
            current_part = "<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n" + workout_info
        else:
            current_part += workout_info
    
    # Add the last part
    parts.append(current_part)
    
    return parts


def format_weight_period_response(period):
    """Format weight period response message"""
    return f"üìä –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}"